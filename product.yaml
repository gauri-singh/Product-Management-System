swagger: "2.0"
info:
  description: "This is Product Management Application with APIs which will make managing the products and your life easy"
  version: "1.0.0"
  title: "Product Management System"
  contact:
    email: "ggauri97@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
basePath: "/"
tags:
- name: "Product"
  description: "Products desciptions"
- name: "shop"
  description: "Product orders"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /product:
    post:
      tags:
      - "Product"
      summary: "Add a new product"
      description: ""
      operationId: "addProduct"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        in: "formData"
        description: "Name of the product"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Status of the product"
        required: false
        type: "string"
      - name: "colour"
        in: "formData"
        description: "Colour of the product"
        required: false
        type: "string"
      - name: "price"
        in: "formData"
        description: "Price of the product without tax"
        required: false
        type: "number"
      - name: "totalprice"
        in: "formData"
        description: "Price of the product with tax"
        required: false
        type: "number"
      - name: "size"
        in: "formData"
        description: "Size of the product"
        type: "string"
        required: false
      - name: "tags"
        in: "formData"
        description: "Tags of the product"
        required: false
        type: "string"
      - name: "photoUrls"
        in: "formData"
        description: "PhotoUrls of the product"
        required: false
        type: "string"
      
      responses:
        200:
          description: "Successfully added"
        405:
          description: "Invalid input"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
    put:
      tags:
      - "Product"
      summary: "Update an existing Product item"
      description: ""
      operationId: "updateProduct"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Modify an existing product"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        200:
          description: "Successfully updated"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
        405:
          description: "Validation exception"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
  /product/{productSKU}:
    get:
      tags:
      - "Product"
      summary: "Find product by SKU"
      description: "Returns a single product"
      operationId: "getProductBySKU"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "productSKU"
        in: "path"
        description: "ID or the SKU of the product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        400:
          description: "Invalid  SKU supplied"
        404:
          description: "Product not found"
      security:
      - api_key: []
    post:
      tags:
      - "Product"
      summary: "Updates a product in the store with form data"
      description: ""
      operationId: "updateProductWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "productSKU"
        in: "path"
        description: "ID of product that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the product"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the product"
        required: false
        type: "string"
      - name: "colour"
        in: "formData"
        description: "Updated colour of the product"
        required: false
        type: "string"
      - name: "price"
        in: "formData"
        description: "Updated price of the product without tax"
        required: false
        type: "number"
      - name: "totalprice"
        in: "formData"
        description: "Updated price of the product with tax"
        required: false
        type: "number"
      responses:
        200:
          description: "Successfully updated"
        405:
          description: "Invalid input"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
    delete:
      tags:
      - "Product"
      summary: "Deletes a single product"
      description: ""
      operationId: "deleteProduct"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "productSKU"
        in: "path"
        description: "Product SKU to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successfully deleted"
        400:
          description: "Invalid SKU supplied"
        404:
          description: "Product not found"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
  /product/{productSKU}/uploadImage:
    post:
      tags:
      - "Product"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "productSKU"
        in: "path"
        description: "SKU of product to add the photo"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
  /product/findByName:
    get:
      tags:
      - "Product"
      summary: "Finds Products by Name"
      description: "Name of the product"
      operationId: "findProductsByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Product names that has to be returned"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        400:
          description: "Invalid Name value"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
  /product/findByState:
    get:
      tags:
      - "Product"
      summary: "Finds Products by state"
      description: "Live State or Draft State"
      operationId: "findProductsByState"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "state"
        in: "query"
        description: "State values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "live"
          - "draft"
          default: "live"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        400:
          description: "Invalid state value"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
  /product/findByTags:
    get:
      tags:
      - "Product"
      summary: "Finds Products by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findProductsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        400:
          description: "Invalid tag value"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
  /product/findByCategory:
    get:
      tags:
      - "Product"
      summary: "Finds Products by category"
      description: "Muliple categories can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findProductsByCategory"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "category"
        in: "query"
        description: "Categories to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        400:
          description: "Invalid Category value"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
  /product/findBySize:
    get:
      tags:
      - "Product"
      summary: "Finds Products by sizes"
      description: "Muliple sizes can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findProductsBySize"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "size"
        in: "query"
        description: "Sizes to filter by"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "small"
          - "medium"
          - "large"
          default: "medium"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        400:
          description: "Invalid size value"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"
  /product/findByColour:
    get:
      tags:
      - "Product"
      summary: "Finds Products by colours"
      description: "Muliple colours can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findProductsByColour"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "colour"
        in: "query"
        description: "Colours to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        400:
          description: "Invalid colour value"
      security:
      - productstore_auth:
        - "write:products"
        - "read:products"

securityDefinitions:
  productstore_auth:
    type: "oauth2"
    authorizationUrl: "http://productstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:products: "modify products in your account"
      read:products: "read your products"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Size:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        enum:
        - "small"
        - "medium"
        - "large"
    xml:
      name: "Size"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Product:
    type: "object"
    required:
    - "name"
    properties:
      sku:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      size:
        $ref: "#/definitions/Size"
      name:
        type: "string"
        example: "Milk"
      colour:
        type: "string"
        example: "Red"
        description: "Colour of the product if any"
      price:
        type: "number"
        example: 56.66
        description: "Product price without tax"
      totalprice:
        type: "number"
        example: 70
        description: "Product price with tax"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
        description: "Tags associated with product"
      state:
        type: "string"
        description: "Product current State"
        enum:
        - "Live"
        - "Draft"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
